snippet     coding
options     head
	//init(from decoder: Decoder) throws {
	//    let values = try decoder.container(keyedBy: CodingKeys.self)
	//    latitude = try values.decode(Double.self, forKey: .latitude)
	//    longitude = try values.decode(Double.self, forKey: .longitude)
	//    let additionalInfo = try values.nestedContainer(keyedBy: AdditionalInfoKeys.self, forKey: .additionalInfo)
	//    elevation = try additionalInfo.decode(Double.self, forKey: .elevation)
	//    self = TestENUM.alpha(number: 3)
	//}
	//func encode(to encoder: Encoder) throws {
	//    var container = encoder.container(keyedBy: CodingKeys.self)
	//    switch self {
	//    case .alpha(let v):
	//        try container.encode("alpha", forKey: .kase)
	//        try container.encode(v, forKey: .number)
	//    }
	//}
	//enum CodingKeys: String, CodingKey {
	//    case alpha = "ALPHA"
	//}

snippet     jsondecoder
options     head
	let decoder: JSONDecoder = JSONDecoder()
	do {
	    let json: Test = try decoder.decode(Test.self, from: jsonData)
	    print(json)
	} catch {
	    print("error:", error.localizedDescription)
	}

snippet     jsonencoder
options     head
	let encoder = JSONEncoder()
	encoder.outputFormatting = .prettyPrinted // リーダブルな出力
	let encoded = try! encoder.encode(device)
	print(String(data: encoded, encoding: .utf8)!)

snippet     directory
options     head
	let fileManager = NSFileManager.defaultManager()
	let paths = NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true)
	let folder = paths[0] + "/${1:direcoryname}"
	if !fileManager.fileExistsAtPath(folder){
	    do {
	        try fileManager.createDirectoryAtPath(folder, withIntermediateDirectories: true, attributes: nil)
	    }catch{
	    }
	}

snippet     resource
options     head
	if let path = Bundle.main.path(forResource: ${1:hoge}, ofType: "${2:txt}"){
	    let url = URL(fileURLWithPath: path)
	}

snippet     saveload
options     head
	let file = "file.txt" //this is the file. we will write to and read from it
	let text = "some text" //just a text
	if let dir = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first {
	    let fileURL = dir.appendingPathComponent(file)
	    //writing
	    do {
	        try text.write(to: fileURL, atomically: false, encoding: .utf8)
	    } catch {/* error handling here */}
	    //reading
	    do {
	        let text2 = try String(contentsOf: fileURL, encoding: .utf8)
	    } catch {/* error handling here */}
	}

snippet     dir
options     head
	//let documentPath = NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0]
	//var fileNames: [String] {
	//    do {
	//        return try FileManager.default.contentsOfDirectory(atPath: documentPath)
	//    } catch {
	//        return []
	//    }
	//}
	//return fileNames.flatMap { fileName in
	//    do {
	//        var texts: [String] = try String(contentsOfFile: documentPath + "/" + fileName, encoding: String.Encoding(rawValue: String.Encoding.utf8.rawValue)).lines
	//        texts = texts.deleteSpaceOnly(texts: texts)
	//        return texts
	//    } catch {
	//        return nil
	//    }
	//}

snippet     DocumentSaveLoadKit
options     head
	var ${1:user}Directory : URL {
	    let dirName = "${1}"
	    let dir = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
	    let tmp = dir.appendingPathComponent(dirName, isDirectory: true)
	    return tmp
	}
	init() {
	    let flgExists = FileManager.default.fileExists(atPath: ${1}Directory.path)
	    if !flgExists {
	        try? FileManager.default.createDirectory(at: ${1}Directory, withIntermediateDirectories: true)
	    }
	}
	func saveData() {
	    let encoder = JSONEncoder()
	    encoder.outputFormatting = .prettyPrinted // リーダブルな出力
	    let encoded = try! encoder.encode(${2:codable object})
	    let fileURL = self.${1}Directory.appendingPathComponent("filename", isDirectory: false)
	    //writing
	    do {
	        try encoded.write(to: fileURL, options: .atomic)
	    } catch {
	        print(error)
	    }
	}
